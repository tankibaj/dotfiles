#!/usr/bin/env bash

set -eo pipefail

help() {
    local -r flagsTable=$(
        printf "%s\n" \
            "-a, --add, add                 Add helm all defined helm repos" \
            "--addons, addons               Get latest addons version" \
            "-h, --help, help               Display help list" \
            "-l, --list, list               List chart version" \
            "-v, --values, values           Download chart values"
    )
    echo -e "$flagsTable"
}

addons=(
  "autoscaler=https://kubernetes.github.io/autoscaler"
  "aws-ebs-csi-driver=https://kubernetes-sigs.github.io/aws-ebs-csi-driver"
  "aws-efs-csi-driver=https://kubernetes-sigs.github.io/aws-efs-csi-driver"
  "external-dns=https://kubernetes-sigs.github.io/external-dns"
  "eks=https://aws.github.io/eks-charts"
  "metrics-server=https://kubernetes-sigs.github.io/metrics-server"
  "ingress-nginx=https://kubernetes.github.io/ingress-nginx"
  "vmware-tanzu=https://vmware-tanzu.github.io/helm-charts"
)

argo=(
  "argo=https://argoproj.github.io/argo-helm"
)

add_repos() {
  repo_list=("$@")

  for repo in "${repo_list[@]}"; do
    name=$(echo "$repo" | cut -d '=' -f 1)
    url=$(echo "$repo" | cut -d '=' -f 2)

    # Check if the repository is already added
    if helm repo list | grep -q "^$name"; then
      echo "Helm repo $name is already added"
    else
      echo "Adding helm repo $name from $url"
      helm repo add "$name" "$url"
    fi
  done
}


repo() {
  IFS=';' # https://en.wikipedia.org/wiki/Input_Field_Separators

  read -ra REPO <<< "$(helm repo list --output json | jq -r '.[].name' | tr '\n' ';')"

  local COUNT=1
  for i in ${REPO[@]}; do
    read -ra ITEMS <<< "${i}"
    echo "  ${COUNT}) ${ITEMS[0]}" >&2
    ((COUNT=COUNT+1))
  done

  local SELECT=0
  while [[ ${SELECT} -lt 1 || ${SELECT} -ge $COUNT ]]; do
    read -p "Pick a repo: " SELECT >&2
  done

  echo "${REPO[(SELECT-1)]}"
}

chart() {
  IFS=';' # https://en.wikipedia.org/wiki/Input_Field_Separators

  local REPO=$(repo)
  read -ra CHART <<< "$(helm search repo ${REPO} --output json | jq -r '.[].name' | tr '\n' ';')"

  local COUNT=1
  for i in ${CHART[@]}; do
    read -ra ITEMS <<< "${i}"
    echo "  ${COUNT}) ${ITEMS[0]}" >&2
    ((COUNT=COUNT+1))
  done

  local SELECT=0
  while [[ ${SELECT} -lt 1 || ${SELECT} -ge $COUNT ]]; do
    read -p "Pick a chart: " SELECT >&2
  done

  echo "${CHART[(SELECT-1)]}"
}

latest_version() {
    local repos=("$@")

    # Print the header of the table
    printf "%-50s | %-20s | %-30s\n" "Chart Name" "Chart Version" "App Version"
    printf "%s\n" "-----------------------------------------------------------------------------------------"

    # Loop through each repository
    for repo in "${repos[@]}"; do
        # Extract the name and URL
        name=${repo%%=*}
        url=${repo#*=}

        # Update the repo to make sure we're getting the latest charts, suppress output
        helm repo update > /dev/null 2>&1

        # Fetch the latest chart version and app version
        helm search repo "$name" --devel --max-col-width=0 | awk 'NR>1 {printf "%-50s | %-20s | %-30s\n", $1, $2, $3}'
    done
}

version() {
  IFS=';' # https://en.wikipedia.org/wiki/Input_Field_Separators

  CHART=$(chart)
  read -ra VERSION <<< "$(helm search repo ${CHART} --versions --output json | jq -r '.[].version' | tr '\n' ';')"

  local COUNT=1
  for i in ${VERSION[@]}; do
    read -ra ITEMS <<< "${i}"
    echo "  ${COUNT}) ${ITEMS[0]}" >&2
    ((COUNT=COUNT+1))
  done

  local SELECT=0
  while [[ ${SELECT} -lt 1 || ${SELECT} -ge $COUNT ]]; do
    read -p "Pick a chart version: " SELECT >&2
  done

  echo "${CHART} --version ${VERSION[(SELECT-1)]}"
}

OPTION=$1
case "$OPTION" in
-a | --add | add)
    add_repos "${addons[@]}"
    add_repos "${argo[@]}"
    ;;
-h | --help | help)
    help
    ;;
-l | --list | list)
    CHART=$(chart)
    helm search repo ${CHART} --versions
    ;;
--addons | addons)
    latest_version "${addons[@]}"
    ;;
-v | --values | values)
    CHART_VERSION=$(version)
    FILEVERSION=$(echo ${CHART_VERSION} | awk '{print $3}')
    FILENAME="values_v${FILEVERSION}.default.yaml"
    helm show values ${CHART_VERSION} > ${FILENAME}
    ;;
*)
    help
    exit 1
    ;;
esac