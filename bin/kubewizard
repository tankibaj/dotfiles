#!/usr/bin/env python3

import argparse
from kubernetes import config as kube_config
from termcolor import colored
from modules.kubewizard.view_pod_logs import view_pod_logs
from modules.kubewizard.exec_interactive_shell import exec_interactive_shell
from modules.kubewizard.decode_secrets import decode_secrets


def get_current_namespace():
    # Load the kubeconfig file and get the current context
    kube_config.load_kube_config()
    current_context = kube_config.kube_config.list_kube_config_contexts()[1]['context']
    return current_context.get('namespace', 'default')  # Return 'default' if namespace is not set


# Import necessary modules
# kubernetes for Kubernetes API, subprocess for shell commands, webbrowser to open browser

def main_menu(output_format='plain'):
    """
    Show main menu and handle user input.
    """
    print("========= Kubernetes Wizard =========")
    print("1: View Pod Logs")
    print("2: Execute Interactive Shell in Pod")
    print("3: Decode Secrets")
    print("4: Describe Pod")
    print("5: Monitor Events")
    print("6: Port-forward a Service")
    print("7: Quit")
    print("=====================================")

    choice = input((colored("Select an option: ", 'magenta')))

    if choice == '1':
        view_pod_logs(get_current_namespace())
    elif choice == '2':
        exec_interactive_shell(get_current_namespace())
    elif choice == '3':
        decode_secrets(get_current_namespace(), output_format)
    elif choice == '4':
        describe_pod()
    elif choice == '5':
        monitor_events()
    elif choice == '6':
        port_forward_service()
    elif choice == '7':
        print(get_current_namespace())
    else:
        print("Invalid option. Try again.")


def describe_pod():
    # List all pods in the namespace
    # User selects a pod
    # Fetch and display detailed information, including events and resource usage
    pass


def monitor_events():
    # Monitor and display real-time events in the namespace
    pass


def port_forward_service():
    # List all services and their corresponding pods in the namespace
    # User selects a service
    # Start port-forwarding for the selected service
    # Open the service in the default web browser
    pass


# Execution starts here
if __name__ == "__main__":
    # Create an argument parser
    parser = argparse.ArgumentParser(description="Kubernetes Wizard")

    # Add the "--output" or "-o" argument
    parser.add_argument("--output", "-o", choices=["plain", "json"], default="plain", help="Output format")

    # Parse the arguments
    args = parser.parse_args()

    # Execute the main menu and pass the output format
    main_menu(args.output)

