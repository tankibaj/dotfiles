#!/usr/bin/env python3

from InquirerPy import inquirer
import argparse
from kubernetes import config as kube_config
from termcolor import colored
from modules.kubewizard.view_pod_logs import view_pod_logs
from modules.kubewizard.exec_interactive_shell import exec_interactive_shell
from modules.kubewizard.decode_secrets import decode_secrets
from modules.kubewizard.describe_pod import describe_pod
from modules.kubewizard.monitor_events import monitor_events
from modules.kubewizard.port_forward_service import port_forward_service
from modules.kubewizard.port_forward_service import Args


def get_namespace(namespace=None):
    if namespace:
        return namespace

    # Load the kubeconfig file and get the current context
    kube_config.load_kube_config()
    current_context = kube_config.kube_config.list_kube_config_contexts()[1]['context']
    return current_context.get('namespace', 'default')  # Return 'default' if namespace is not set


def main_menu(output_format='plain', follow=False, all_namespaces=False, namespace=None, port=None, svc_port=None):
    """
    Show main menu and handle user input.
    """
    try:
        while True:
            print(colored('Use the arrow keys to navigate: ‚Üì ‚Üë', 'dark_grey'))
            action = inquirer.select(
                message="What do you want to do?",
                choices=[
                    {"name": "üîç Watch Logs", "value": "watch_logs"},
                    {"name": "üêö Exec Shell in Pod", "value": "exec_shell"},
                    {"name": "üîê Get Secrets", "value": "get_secrets"},
                    {"name": "üîç Describe Pod", "value": "describe_pod"},
                    {"name": "‚ö°Ô∏è Watch Events", "value": "watch_events"},
                    {"name": "üîÄ Port Forward", "value": "port_forward"},
                    {"name": "‚ùì Help", "value": "help"},
                    {"name": "üö™ Quit", "value": "quit"}
                ],
            ).execute()

            selected_namespace = get_namespace(namespace)

            if action == 'watch_logs':
                view_pod_logs(selected_namespace, follow)
            elif action == 'exec_shell':
                exec_interactive_shell(selected_namespace)
            elif action == 'get_secrets':
                decode_secrets(selected_namespace, output_format)
            elif action == 'describe_pod':
                describe_pod(selected_namespace)
            elif action == 'watch_events':
                monitor_events(selected_namespace, all_namespaces)
            elif action == 'port_forward':
                port_forward_args = Args(selected_namespace, port, svc_port)
                port_forward_service(port_forward_args)
            elif action == 'quit':
                print("Exiting...")
                break
            else:
                print("Invalid option. Try again.")
    except KeyboardInterrupt:
        print(colored("\n\nExiting Kubernetes Wizard. Goodbye!", 'red', attrs=['bold']))


if __name__ == "__main__":
    # Create an argument parser
    parser = argparse.ArgumentParser(description="Kubernetes Wizard")

    # Add the "--all-namespaces" or "-A" argument
    parser.add_argument('--all-namespaces', '-A', action='store_true', help='List the requested object(s) across all '                                                         'namespaces')

    # Add the "--namespace" or "-n" argument
    parser.add_argument("--namespace", "-n", type=str,  help="The Kubernetes namespace to use")

    # Add the "--output" or "-o" argument
    parser.add_argument("--output", "-o", choices=["plain", "json"], default="plain", help="Output format of secrets")

    # Add the "--follow" or "-f" argument
    parser.add_argument('--follow', "-f", action="store_true", help='Follow logs')

    # Add the "--port" or "-p" argument
    parser.add_argument("--port", "-p", type=int, help="The port on which to run the proxy. Set to 0 to pick a random "
                                                       "port. (default 8001)")
    # Add the "--svc-port" argument
    parser.add_argument("--svc-port", help="The service port name or number. default is empty and uses the first port")

    # Parse the arguments
    args = parser.parse_args()

    # Execute the main menu and pass the output format and follow flag
    main_menu(args.output, args.follow, args.all_namespaces, args.namespace, args.port, args.svc_port)
