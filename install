#!/usr/bin/env bash

set -eo pipefail

DOTFILES=$HOME/.dotfiles
ZSH=$HOME/.oh-my-zsh

#=========================================================================
#      ---------------| MacOS |---------------
#=========================================================================
macOS() {
  if test ! $(which brew); then # -- Check for Homebrew and install if don't have it
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>$HOME/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  setupRepo
  brew update                                   # Update Homebrew recipes
  brew bundle install --file=$DOTFILES/Brewfile # Install all contents from Brewfile
}

#=========================================================================
#      ---------------| Ubuntu |---------------
#=========================================================================
installEXA() {
  curl -s https://api.github.com/repos/ogham/exa/releases/latest |
    grep browser_download_url |
    grep exa-linux-x86_64-v |
    cut -d '"' -f 4 |
    wget -i -
  unzip exa-linux-x86_64-v*.zip
  sudo mv bin/exa /usr/local/bin/exa
  sudo mv completions/exa.zsh /usr/local/share/zsh/site-functions/exa.zsh
  rm -rf bin completions man exa-linux-x86_64-v*.zip
}

setupLocale() {
  sudo rm -f /etc/default/locale
  sudo locale-gen "en_US.UTF-8"
  sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
  source /etc/default/locale
  sudo timedatectl set-timezone Europe/Berlin
}

ubuntu() {
  echo "$USER ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/$USER
  curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash
  sudo apt update
  sudo apt install -qq -y zsh curl vim git jq zip ntp net-tools speedtest
  installEXA
  setupLocale
  sudo usermod -s /usr/bin/zsh $(whoami) # -- Set ZSH default shell for user
  setupRepo
}

#=========================================================================
#      ---------------| Common |---------------
#=========================================================================
backup() {
  if [[ -e $HOME/.zshrc ]]; then
    cp $HOME/.zshrc $HOME/.zshrc.original
  fi

  if [[ -e $HOME/.bashrc ]]; then
    cp $HOME/.bashrc $HOME/.bashrc.original
  fi
}

cleanUp() {
  if [[ -L $HOME/.p10k.zsh ]]; then
    sudo rm -f $HOME/.p10k.zsh
  fi

  if [[ -L $HOME/.zshrc ]]; then
    sudo rm -f $HOME/.zshrc
  fi

  if [[ -L $HOME/.gitignore ]]; then
    sudo rm -f $HOME/.gitignore
  fi

  if [[ -d $DOTFILES ]]; then
    sudo rm -rf $DOTFILES
  fi

  if [[ -d $ZSH ]]; then
    sudo rm -rf $ZSH
  fi
}

setupRepo() {
  git clone https://github.com/tankibaj/dotfiles.git $DOTFILES                     # -- Clone Dotfiles
  git clone https://github.com/ohmyzsh/ohmyzsh.git $ZSH                            # -- Clone Oh My Zsh
  git clone https://github.com/romkatv/powerlevel10k.git $ZSH/themes/powerlevel10k # -- Clone PowerLeve10K theme

  # -- Clone PowerLeve10K plugins for autosuggestion and syntax highlighting:
  git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH/plugins/zsh-autosuggestions
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH/plugins/zsh-syntax-highlighting

  ln -s $DOTFILES/.zshrc $HOME/.zshrc       # -- Symlinks the .zshrc file from the .dotfiles/.zshrc
  ln -s $DOTFILES/.p10k.zsh $HOME/.p10k.zsh # -- Symlinks the .p10k.zsh file from .dotfiles/.p10k.zsh

  # -- Global gitignore
  ln -s $DOTFILES/.gitignore $HOME/.gitignore
  git config --global core.excludesfile $HOME/.dotfiles/.gitignore
}

install() {
  echo
  echo
  echo "Setting up dotfiles....."
  echo
  echo

  cleanUp # -- Remove old files and directories if exist
  backup  # -- Backup existing .zshrc or .bashrc before install Oh My Zsh

  if [[ "$(uname -s)" == "Darwin" ]]; then
    macOS
  fi

  if [[ "$(cat /etc/issue | grep Ubuntu | awk '{ print $1}')" = "Ubuntu" ]] || [[ "$(cat /etc/issue | grep Debian | awk '{ print $1}')" = "Debian" ]]; then
    ubuntu
  fi

  echo
  echo
  echo "[INFO] Setup has been completed!!! Please restart your terminal"
  echo
}

if [[ ! -d $DOTFILES ]]; then
  install
else
  read -p "[INFO] Dotfiles already installed. Do you want to reinstall? [y/N]: " confirmation
  case $(echo $confirmation | tr '[A-Z]' '[a-z]') in
  y | yes)
    install
    ;;
  *)
    exit 1
    ;;
  esac
fi
